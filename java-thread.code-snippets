{
	"java-thread": {
		"scope": "",
		"prefix": "!@java-thread",
		"body": [
			"// used for `threadPool`",
			"import java.util.concurrent.ExecutorService;",
			"import java.util.concurrent.Executors;",
			"",
			"",
			"",
			"// it's a good idea to subclass `Thread`",
			"// for making threads.",
			"// you can add as many features you need",
			"// extra to the power of concurrency.",
			"class T extends Thread {",
			"",
			"    String threadTag = \"\";",
			"",
			"    public T(String threadTag) {",
			"        this.threadTag = threadTag;",
			"    }",
			"",
			"    // this method is called inside the",
			"    // space of the new thread when `start()`",
			"    // method is called",
			"    @Override",
			"    public void run() {",
			"        super.run();",
			"        ",
			"        // a demo iteration",
			"        for (int i = 0; i < 10; i++) {",
			"",
			"            // a random number in milliseconds used",
			"            // to sleep this thread.",
			"            long r = (long) (Math.random() * 300L);",
			"",
			"",
			"            System.out.println(String.format(\"%s -> %d\", this.threadTag, i));",
			"            try {",
			"                // blocks the execution of this thread",
			"                // by a number of milliseconds",
			"                // this blockage is for presentation.",
			"                Thread.sleep(r);",
			"            } catch (Exception ex) {",
			"",
			"            }",
			"        }",
			"    }",
			"}",
			"",
			"class H implements Runnable {",
			"",
			"    String threadTag = \"\";",
			"",
			"    public H(String threadTag) {",
			"        this.threadTag = threadTag;",
			"    }",
			"",
			"    @Override",
			"    public void run() {",
			"        for (int i = 0; i < 10; i++) {",
			"            long r = (long) (Math.random() * 300L);",
			"            System.out.println(String.format(\"%s -> %d\", this.threadTag, i));",
			"            try {",
			"                Thread.sleep(r);",
			"            } catch (Exception ex) {",
			"",
			"            }",
			"        }",
			"    }",
			"}",
			"",
			"public class Main {",
			"    public static void main(String[] args) {",
			"        // `t1` and `t2` are instances of `T`",
			"        T t1 = new T(\"THREAD A\");",
			"        T t2 = new T(\"THREAD B\");",
			"",
			"        // starting `t1` and `t2` concurrently",
			"        t1.start();",
			"        t2.start();",
			"",
			"        // defines `t3` by runnable",
			"        Thread t3 = new Thread(new H(\"THREAD C\"));",
			"        t3.start();",
			"",
			"",
			"        // defines `t4` as in-line",
			"        Thread t4 = new Thread(new Runnable() {",
			"            @Override",
			"            public void run() {",
			"                try {",
			"                     ",
			"                    // by calling `join()`",
			"                    // the execution of this thread will",
			"                    // be blocked until the execution of",
			"                    // `t2` is completely finished.",
			"                    t2.join();",
			"                } catch (Exception ex) {",
			"                    System.err.println(ex.getMessage());",
			"                }",
			"",
			"                for (int i = 0; i < 10; i++) {",
			"                    long r = (long) (Math.random() * 300L);",
			"                    System.out.println(String.format(\"%s -> %d\", \"THREAD D\", i));",
			"                    try {",
			"                        Thread.sleep(r);",
			"                    } catch (Exception ex) {",
			"                        System.err.println(ex.getMessage());",
			"                    }",
			"                }",
			"            }",
			"        });",
			"",
			"        t4.start();",
			"",
			"        // making thread pool",
			"        ExecutorService tp = Executors.newFixedThreadPool(10);",
			"    ",
			"        // `t5` and `t6` are going to be",
			"        // executed inside threads which are",
			"        // provided by a `thread pool`.",
			"        // using thread pools is a good ",
			"        // idea if you know how many threads",
			"        // is needed in advance.",
			"        Thread t5 = new Thread(new Runnable() {",
			"",
			"            @Override",
			"            public void run() {",
			"                for (int i = 0; i < 10; i++) {",
			"                    long r = (long) (Math.random() * 300L);",
			"                    System.out.println(String.format(\"%s -> %d\", \"THREAD E\", i));",
			"                    try {",
			"                        Thread.sleep(r);",
			"                    } catch (Exception ex) {",
			"                        System.err.println(ex.getMessage());",
			"                    }",
			"                }",
			"            }",
			"        });",
			"",
			"        Thread t6 = new Thread(new Runnable() {",
			"",
			"            @Override",
			"            public void run() {",
			"                for (int i = 0; i < 10; i++) {",
			"                    long r = (long) (Math.random() * 300L);",
			"                    System.out.println(String.format(\"%s -> %d\", \"THREAD F\", i));",
			"                    try {",
			"                        Thread.sleep(r);",
			"                    } catch (Exception ex) {",
			"                        System.err.println(ex.getMessage());",
			"                    }",
			"                }",
			"            }",
			"        });",
			"",
			"        // handing `t5` and `t6` to",
			"        // be executed by threads in",
			"        // `thread pool` concurrently",
			"        tp.submit(t5);",
			"        tp.submit(t6);",
			"    }",
			"}",
			"/* -------------------------------------------------- */"
		],
		"description": "Java Threads"
	}
}

{
	"angular-install": {
		"scope": "",
		"prefix": "~! angular-install",
		"body": [
			"npm install -g @angular/cli",
			"",
			"Note: install node.js if not installed yet.",
			"Web: https://nodejs.org/en/"
		],
		"description": "install command for angular"
	},

	"angular-new-project": {
		"scope": "",
		"prefix": "~! angular-new-project",
		"body": ["ng new $appName ", "cd $appName", "", "", "// use also:", "~! angular-run-server"],
		"description": "makes a new angular project"
	},

	"angular-run-server": {
		"scope": "",
		"prefix": "~! angular-run-server",
		"body": [
			"// run a dedicated server:",
			"ng serve",
			"",
			"",
			"// run a dedicated server using a proxy.",
			"ng serve --proxy-config proxy-config.json",
			"",
			"",
			"// proxy-config.json:",
			"// this is the location of server application",
			"// which is offering your back-end service,",
			"// for example laravel which is by default ",
			"// running on port 8000. ",
			"{",
			"    \"/api\":{",
			"        \"target\":\"http://localhost:8000\",",
			"        \"secure\":\"false\",",
			"        \"changeOrigin\":\"true\"",
			"    }",
			"}",
			"",
			"// Note: ",
			"// make 'proxy-config.json' file in the root of",
			"// the project in the case the file does not exist."
		],
		"description": "run a dedicated server"
	},

	"angular-deploy": {
		"scope": "",
		"prefix": "~! angular-deploy",
		"body": ["ng build --prod --base-href ./ --deploy-url ./"],
		"description": "deploy command for angular project"
	},
	"angular-new-component": {
		"scope": "",
		"prefix": "~! angular-new-component",
		"body": ["ng generate component $cmp", "", "", "// also you may use:", "ng g c cmp"],
		"description": "generates a new component"
	},

	"angular-install-jquery": {
		"scope": "",
		"prefix": "~! angular-install-jquery",
		"body": [
			"npm install jquery --save",
			"npm install --save-dev @types/jquery",
			"",
			"",
			"// file: angular.json",
			"\"apps\": [{",
			"  \"scripts\": [",
			"    \"../node_modules/jquery/dist/jquery.min.js\", ",
			"  ],",
			"}]",
			"",
			"// Note:",
			"// Check your ref path it might be different.",
			"",
			"",
			"// in the *.ts file add:",
			"import * as $ from \"jquery\";",
			"",
			"",
			"// file: tsconfig.json",
			"\"typeRoots\": [\"node_modules/@types\", \"node_modules/@types/jquery/dist/\"],",
			""
		],
		"description": "installs jquery for angular"
	},

	"angular-install-bootstrap": {
		"scope": "",
		"prefix": "~! angular-install-bootstrap",
		"body": [
			"npm install --save bootstrap@4",
			"",
			"",
			"// Further, when you use a project created with ",
			"// Angular CLI 6+ (check via ng v ), you'll have ",
			"// an angular.json file instead of an .angular-cli.json file. ",
			"// In that file, you still need to add Bootstrap to the styles[] ",
			"// array, but the path should be ",
			"// node_modules/bootstrap/dist/css/bootstrap.min.css ",
			"NOT",
			"// ../node_modules/bootstrap/dist/css/bootstrap.min.css . ",
			"// The leading ../ must not be included.",
			"",
			"",
			"",
			"[WEB]: https://www.javatpoint.com/angular-7-with-bootstrap",
			"[WEB]: https://www.w3schools.com/bootstrap4/",
			""
		],
		"description": "installs bootstrap for angular"
	},
	"angular-install-awesome-font": {
		"scope": "",
		"prefix": "~! angular-install-awesome-font",
		"body": [
			"npm install --save font-awesome angular-font-awesome",
			"",
			"// file: app.module.ts",
			"import { AngularFontAwesomeModule } from 'angular-font-awesome';",
			"",
			"// file: angular.json",
			"// add the next line to `styles` array",
			"node_modules/font-awesome/css/font-awesome.css",
			"",
			"",
			"[WEB] https://www.npmjs.com/package/angular-font-awesome"
		],
		"description": "installs awesome font for angular"
	},
	"laravel-new-project": {
		"scope": "",
		"prefix": "~! laravel-new-project",
		"body": [
			"composer create-project laravel/laravel --prefer-dist ./backend",
			"",
			"",
			"// Note: you may need to install composer first.",
			"// 'composer' is the PHP dependency manager tool."
		],
		"description": "creates a new laravel project"
	},

	"laravel-run-server": {
		"scope": "",
		"prefix": "~! laravel-run-server",
		"body": [
			"php artisan serve",
			"",
			"// Note:",
			"// the server will be running on ",
			"// http://localhost:8000/",
			"// by default.",
			"",
			"",
			"// Note:",
			"// For maintenance use the following commands:",
			"// php artisan down",
			"// php artisan up"
		],
		"description": "runs a dedicated server"
	},
	"laravel-deploy-apache-settings": {
		"scope": "",
		"prefix": "~! laravel-deploy-apache-settings",
		"body": [
			"// File: httpd.conf",
			"",
			"<VirtualHost *:80>",
			"    DocumentRoot F:/HomeLaravel/hello-world-2/laravel/public",
			"    ServerName localhost  ",
			"    ServerAlias localhost",
			"    <Directory \"F:/HomeLaravel/hello-world-2/laravel/public\">",
			"        Options -Indexes",
			"        DirectoryIndex index.php index.html",
			"        AllowOverride All",
			"        Require all granted",
			"    </Directory>",
			"</VirtualHost>"
		],
		"description": "apache settings for laravel deployment"
	},
	"laravel-new-model": {
		"scope": "",
		"prefix": "~! laravel-new-model",
		"body": [
			"php artisan make:model MyModel -m",
			"",
			"",
			"// Note:",
			"// Using -m also makes a migration php file in",
			"// migration folder.",
			"",
			"",
			"php artisan migrate --path=/database/migrations/---.php"
		],
		"description": "creates a new model"
	},
	"laravel-migrate": {
		"scope": "",
		"prefix": "~! laravel-migrate",
		"body": [
			"php artisan migrate --path=/database/migrations/---.php",
			"",
			"",
			"// Note:",
			"// use the following command to rollback",
			"php artisan migrate:rollback --path=/database/migrations/---.php",
			""
		],
		"description": "migration"
	},

	"laravel-seed": {
		"scope": "",
		"prefix": "~! laravel-seed",
		"body": [
			"php artisan make:seeder MySeeder",
			"",
			"",
			"// Note:",
			"// Check the path: /database/seeds/",
			"",
			"",
			"// In the run() method, add some insertions",
			"// Example:",
			"        DB::table('tbl_dict')->insert([",
			"            'entry_text'=>'handy',",
			"            'entry_def'=>'useful'",
			"        ]);",
			"        ",
			"        DB::table('tbl_dict')->insert([",
			"            'entry_text'=>'safe',",
			"            'entry_def'=>'secure'",
			"        ]);",
			"        ",
			"        DB::table('tbl_dict')->insert([",
			"            'entry_text'=>'unhappy',",
			"            'entry_def'=>'sad'",
			"        ]);",
			"",
			"",
			"// Now run the script by this command:",
			"php artisan db:seed --class=theNameOfGeneratedClass",
			""
		],
		"description": "seed a table"
	},
	"git-all": {
		"scope": "",
		"prefix": "~! git-all",
		"body": [
			"git init",
			"git config --global user.name abcdef",
			"git config --global user.email abc@def.com",
			"git add .",
			"git rm myfile.txt",
			"git status",
			"git commit -m \"YourComment\"",
			"git clone https://github.com/path.git",
			"git remote add origin https://github.com/path.git",
			"git pull",
			"git push -u origin master",
			"",
			"// makes a new branch called `dev`",
			"git branch dev",
			"",
			"// leave the current branch to `dev`",
			"git checkout dev",
			"",
			"// make your changes and commits",
			"",
			"// move to master",
			"git checkout master",
			"",
			"// merge `dev` into master branch",
			"git merge dev",
			""
		],
		"description": "git main commands"
	},
	"cors-angular-laravel": {
		"scope": "",
		"prefix": "~! cors-angular-laravel",
		"body": [
			"// CORS problem (Angular+Laravel)",
			"//--------------------------------",
			"",
			"1- On back-end add a response header:",
			"",
			"use Illuminate\\\\Http\\\\Response;",
			"...",
			"",
			"return (new Response('response', 200))",
			"  ->header('Content-Type', 'application/json')",
			"  ->header('Access-Control-Allow-Origin', '*');",
			"//--------------------------------",
			"",
			"2- make file \"proxy.config.json\" next to \"package.json\":",
			"{",
			"  \"/api\": {",
			"    \"target\": \"http://localhost:8000\",",
			"    \"secure\": false",
			"  }",
			"}",
			"//--------------------------------",
			"",
			"3- in \"package.json\" change",
			"\"start\": \"ng serve\"",
			"with ",
			"\"start\": \"ng serve --proxy-config proxy.config.json\"",
			"//--------------------------------",
			"",
			"4- use",
			"npm start",
			"in stead of ",
			"ng serve",
			"//--------------------------------",
			"",
			"// Note: You may also disable CORS policy in chrome:",
			"// WEB:",
			"https://stackoverflow.com/questions/3102819/disable-same-origin-policy-in-chrome",
			"",
			"// Example:",
			"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe --disable-web-security"
		],
		"description": "CORS problem solution"
	},
	"angular-url-problem": {
		"scope": "",
		"prefix": "~! angular-url-problem",
		"body": [
			"1: make .htaccess file.",
			"",
			"2:file content:",
			"-------------------------------------------",
			"RewriteEngine On",
			"    # If an existing asset or directory is requested go to it as it is",
			"    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]",
			"    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d",
			"    RewriteRule ^ - [L]",
			"    # If the requested resource doesn't exist, use index.html",
			"RewriteRule ^ /index.html",
			"-------------------------------------------",
			"",
			"Note: this file makes a redirection to index.html",
			"",
			""
		],
		"description": ""
	},
	"react-new-project": {
		"scope": "",
		"prefix": "~! react-new-project",
		"body": [
			"npx create-react-app $$appName",
			"",
			"// Note:",
			"// 'create-react-app' is no longer supported",
			"//  so if you have already installed it globally you",
			"//  may consider to uninstall it first by ",
			"//  the following command:",
			"",
			"// npm uninstall -g create-react-app",
			"",
			"",
			""
		],
		"description": ""
	},
	"react-deploy": {
		"scope": "",
		"prefix": "~! react-deploy",
		"body": [
			"npm run build",
			"",
			"// NOTE:",
			"// open package.json",
			"",
			"// add the following to specify the root location",
			"// \"homepage\": \"/react-deploy-folder/\"",
			"",
			"// Ex: C:\\\\xampp\\\\htdocs\\\\react-deploy-folder\\\\",
			"//"
		],
		"description": ""
	},
	"cors-react-laravel": {
		"scope": "",
		"prefix": "~! cors-react-laravel",
		"body": [
			"1- open package.json",
			"2- add:",
			"\"proxy\": \"http://localhost:8000/api/\",",
			"suppose that the back-end server is running",
			"on  http://localhost:8000 and serves API on /api",
			"",
			"3- [laravel] make sure the back-end server supplies Access-Control-Allow-Origin header in the response:",
			"",
			"return (new Response('response', 200))",
			"  ->header('Content-Type', 'application/json')",
			"  ->header('Access-Control-Allow-Origin', '*');",
			"",
			"",
			""
		],
		"description": ""
	},
	"react-new-component": {
		"scope": "",
		"prefix": "~! react-new-component",
		"body": [
			"import React, { Component } from 'react';",
			"import './cmp_say_hello.css';",
			"import $ from 'jquery';",
			"",
			"class $CmpSayHello extends Component {",
			"\tconstructor(props) {",
			"\t\tsuper(props);",
			"\t\tthis.state = { srv_greeting: '[NOTHING]' };",
			"\t}",
			"",
			"\tcallSayHello = () => {",
			"\t\tlet self = this;",
			"\t\t$.post('say-hello', {}, (d, s) => {",
			"\t\t\tconsole.log({ d, s });",
			"\t\t\tself.setState({ srv_greeting: d['result'] });",
			"\t\t});",
			"\t};",
			"",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t<div className=\"p-3\">",
			"\t\t\t\t<h1 className=\"title center\">Hello everybody</h1>",
			"\t\t\t\t<p>Press the button to get the server side greetings</p>",
			"\t\t\t\t<button onClick={this.callSayHello} className=\"btn btn-primary\">",
			"\t\t\t\t\tCALL SERVER",
			"\t\t\t\t</button>",
			"\t\t\t\t<br />",
			"\t\t\t\t<span>{this.state.srv_greeting}</span>",
			"\t\t\t</div>",
			"\t\t);",
			"\t}",
			"}",
			"",
			"export default $CmpSayHello;",
			""
		],
		"description": "Suggests a simple component"
	}
}

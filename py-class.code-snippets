{
	"py-class": {
		"scope": "",
		"prefix": "!@py-class",
		"body": [
			"import math",
			"",
			"# a class for managing a mathematical `Point` object",
			"class Point:",
			"    # ",
			"    # `__init__` is the constructor of the class",
			"    def __init__(self, x, y):",
			"        self.x = x",
			"        self.y = y",
			"",
			"",
			"    # ",
			"    # gives out a string representation of",
			"    # the instantiated object",
			"    def present(self):",
			"        print('<{0}, {1}>'.format(self.x, self.y))",
			"",
			"",
			"    def distanceTo(self, q):",
			"        len = math.sqrt((self.x-q.x)**2+(self.y-q.y)**2)",
			"        return len",
			"",
			"",
			"    def centerTo(self, q):",
			"        c = Point((self.x + q.x)/2, (self.y+q.y)/2)",
			"        return c",
			"",
			"# class `PixelPoint` inherits class `Point`",
			"class PixelPoint(Point):",
			"    def __init__(self, r, g, b):",
			"        self.r = r",
			"        self.g = g",
			"        self.b = b",
			"",
			"    # overriding original present routine",
			"    def present(self):",
			"        print('<x:{0}, y:{1} color: ({2},{3},{4})>'.format(",
			"            self.x, self.y, self.r, self.g, self.b))",
			"",
			"    # makes a dictionary out of object's attributes",
			"    def toDictionary(self):",
			"        d = {}",
			"        d['x'] = self.x",
			"        d['y'] = self.y",
			"        d['r'] = self.r",
			"        d['g'] = self.g",
			"        d['b'] = self.b",
			"        return d",
			"",
			"",
			"p = Point(30, 0)",
			"p.present()"
		],
		"description": "Python class"
	}
}
